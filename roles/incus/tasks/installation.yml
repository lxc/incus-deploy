# SPDX-License-Identifier: Apache-2.0
---
- name: Install the Incus package (deb)
  ansible.builtin.apt:
    name:
      - incus
    install_recommends: false
    state: present
  register: install_deb
  when: 'ansible_distribution in ("Debian", "Ubuntu") and incus_roles | length > 0'

- name: Install the Incus package (rpm)
  ansible.builtin.package:
    name:
      - incus
    state: present
  register: install_rpm
  when: 'ansible_distribution == "CentOS" and incus_roles | length > 0'

- name: Install the Incus UI package (deb)
  ansible.builtin.apt:
    name:
      - incus-ui-canonical
    install_recommends: false
    state: present
  when: 'ansible_distribution in ("Debian", "Ubuntu") and "ui" in incus_roles'

- name: Install btrfs tools
  ansible.builtin.package:
    name:
      - btrfs-progs
    state: present
  when: "incus_roles | length > 0 and 'btrfs' in incus_init['storage'] | dict2items | json_query('[].value.driver')"

- name: Install ceph tools
  ansible.builtin.package:
    name:
      - ceph-common
    state: present
  when: "incus_roles | length > 0 and 'ceph' in incus_init['storage'] | dict2items | json_query('[].value.driver')"

- name: Install LVM tools
  ansible.builtin.package:
    name:
      - lvm2
    state: present
  when: "incus_roles | length > 0 and 'lvm' in incus_init['storage'] | dict2items | json_query('[].value.driver')"

- name: List installed kernel images
  ansible.builtin.command: >-
    apt list linux-image-* --installed
  register: linux_image_version
  changed_when: false
  failed_when: "linux_image_version.rc != 0"
  when: >-
    incus_roles | length > 0 and 'zfs' in incus_init['storage'] |
    dict2items | json_query('[].value.driver') and ansible_distribution == 'Debian'

- name: Install linux image headers
  ansible.builtin.apt:
    name:
      - linux-headers-{{ item | regex_replace('^linux-image-(.*)/.*$', '\1') }}
    state: present
  loop: "{{ linux_image_version.stdout_lines | default([]) | select('search', 'linux-image-[0-9]+.*/.*') }}"
  when: >-
    incus_roles | length > 0 and 'zfs' in incus_init['storage'] |
    dict2items | json_query('[].value.driver') and ansible_distribution == 'Debian'

- name: Install ZFS dependencies
  ansible.builtin.package:
    name:
      - zfs-dkms
    state: present
  when: >-
    incus_roles | length > 0 and 'zfs' in incus_init['storage'] |
    dict2items | json_query('[].value.driver') and ansible_distribution == 'Debian'

- name: Install ZFS tools
  ansible.builtin.package:
    name:
      - zfsutils-linux
    state: present
  when: "incus_roles | length > 0 and 'zfs' in incus_init['storage'] | dict2items | json_query('[].value.driver')"

- name: Set uid allocation
  ansible.builtin.command: "usermod root --add-subuids 10000000-1009999999"
  when: '(install_deb.changed or install_rpm.changed) and ansible_distribution == "CentOS"'
  changed_when: true

- name: Set gid allocation
  ansible.builtin.command: "usermod root --add-subgids 10000000-1009999999"
  when: '(install_deb.changed or install_rpm.changed) and ansible_distribution == "CentOS"'
  changed_when: true

- name: Enable incus socket unit
  ansible.builtin.systemd:
    enabled: true
    name: incus.socket
    state: started
  when: 'install_deb.changed or install_rpm.changed'

- name: Enable incus service unit
  ansible.builtin.systemd:
    enabled: true
    name: incus.service
    state: started
  when: 'install_deb.changed or install_rpm.changed'

- name: Enable incus startup unit
  ansible.builtin.systemd:
    enabled: true
    name: incus-startup.service
    state: started
  when: 'install_deb.changed or install_rpm.changed'

- name: Set client listen address
  ansible.builtin.command: "incus --force-local config set core.https_address {{ incus_ip_address_or_default }}"
  when: >-
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  notify:
    - "Apply additional configuration"
    - "Load client certificates"
  changed_when: true

- name: Set cluster listen address
  ansible.builtin.command: "incus --force-local config set cluster.https_address {{ incus_ip_address_or_default }}"
  when: '(install_deb.changed or install_rpm.changed) and "cluster" in incus_roles and incus_servers[0] == inventory_hostname'
  changed_when: true

- name: Set OVN NorthBound database
  ansible.builtin.command: >-
    incus --force-local config
    set network.ovn.northbound_connection={{ incus_ovn_northbound }}
    network.ovn.client_cert="{{ lookup('file', ovn_config_dir + '/' + inventory_hostname + '.crt') }}"
    network.ovn.client_key="{{ lookup('file', ovn_config_dir + '/' + inventory_hostname + '.key') }}"
    network.ovn.ca_cert="{{ lookup('file', ovn_config_dir + '/ca.crt') }}"
  notify: Restart Incus
  when: >-
    (install_deb.changed or install_rpm.changed) and
    incus_ovn_northbound and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Add networks
  ansible.builtin.command: >-
    incus network create {{ item.key }} --type={{ item.value.type }}
    {% for k in item.value.local_config | default([]) %}{{ k }}={{ item.value.local_config[k] }}{% endfor %}
    {% for k in item.value.config | default([]) %} {{ k }}={{ item.value.config[k] }}{% endfor %}
  loop: "{{ incus_init['network'] | dict2items }}"
  when: >-
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Set network description
  ansible.builtin.command: >-
    incus network set --property {{ item.key }} description="{{ item.value.description }}"
  loop: "{{ incus_init['network'] | dict2items }}"
  when: >-
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
    and item.value.description is defined | default(None)
  changed_when: true

- name: Add storage pools
  ansible.builtin.command: >-
    incus storage create {{ item.key }} {{ item.value.driver }}{% for k in item.value.local_config | default([]) %}
    {{ k }}={{ item.value.local_config[k] }}{% endfor %}{% for k in item.value.config | default([]) %}
    {{ k }}={{ item.value.config[k] }}{% endfor %}
  loop: "{{ incus_init['storage'] | dict2items }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Set storage pool description
  ansible.builtin.command: "incus storage set --property {{ item.key }} description=\"{{ item.value.description }}\""
  loop: "{{ incus_init['storage'] | dict2items }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname)) and
    item.value.description | default(None)
  changed_when: true

- name: Add storage pool to default profile
  ansible.builtin.command: "incus profile device add default root disk path=/ pool={{ item }}"
  loop: "{{ incus_init['storage'] | dict2items | json_query('[?value.default].key') }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Add network to default profile
  ansible.builtin.command: "incus profile device add default eth0 nic network={{ item }} name=eth0"
  loop: "{{ incus_init['network'] | dict2items | json_query('[?value.default].key') }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Set linstor controller_connection property
  ansible.builtin.command: >-
    incus --force-local config
    set storage.linstor.controller_connection=http://{{ item }}:3370
  loop: "{{ ansible_play_hosts }}"
  register: register_linstor_controller
  when: >-
    "controller" in hostvars[item]["ansible_facts"]["linstor_roles"] and
    ansible_distribution == "Ubuntu" and
    ansible_distribution_release != "focal"
  changed_when: "register_linstor_controller.rc == 0"

- name: Bootstrap the cluster
  ansible.builtin.command: "incus --force-local cluster enable {{ inventory_hostname }}"
  when: '(install_deb.changed or install_rpm.changed) and "cluster" in incus_roles and incus_servers[0] == inventory_hostname'
  changed_when: true

- name: Create join tokens
  delegate_to: "{{ incus_servers[0] }}"
  ansible.builtin.command: "incus --force-local --quiet cluster add {{ inventory_hostname }}"
  register: cluster_add
  notify:
    - Wait 5s to avoid token use before valid
    - Join the cluster
  when: '(install_deb.changed or install_rpm.changed) and "cluster" in incus_roles and incus_servers[0] != inventory_hostname'
  changed_when: true
