# SPDX-License-Identifier: Apache-2.0
---
- name: Install the Incus package (deb)
  ansible.builtin.apt:
    name:
      - incus
    install_recommends: false
    state: present
  register: install_deb
  when: 'ansible_distribution in ("Debian", "Ubuntu") and incus_roles | length > 0'

- name: Install the Incus package (rpm)
  ansible.builtin.package:
    name:
      - incus
    state: present
  register: install_rpm
  when: 'ansible_distribution == "CentOS" and incus_roles | length > 0'

- name: Install the Incus UI package (deb)
  ansible.builtin.apt:
    name:
      - incus-ui-canonical
    install_recommends: false
    state: present
  when: 'ansible_distribution in ("Debian", "Ubuntu") and "ui" in incus_roles'

- name: Install btrfs tools
  ansible.builtin.package:
    name:
      - btrfs-progs
    state: present
  when: "incus_roles | length > 0 and 'btrfs' in incus_init['storage'] | dict2items | json_query('[].value.driver')"

- name: Install ceph tools
  ansible.builtin.package:
    name:
      - ceph-common
    state: present
  when: "incus_roles | length > 0 and 'ceph' in incus_init['storage'] | dict2items | json_query('[].value.driver')"

- name: Install LVM tools
  ansible.builtin.package:
    name:
      - lvm2
    state: present
  when: "incus_roles | length > 0 and 'lvm' in incus_init['storage'] | dict2items | json_query('[].value.driver')"

- name: Install ZFS dependencies
  ansible.builtin.package:
    name:
      - zfs-dkms
    state: present
  when: >-
    incus_roles | length > 0 and 'zfs' in incus_init['storage'] |
    dict2items | json_query('[].value.driver') and ansible_distribution == 'Debian'

- name: Install ZFS tools
  ansible.builtin.package:
    name:
      - zfsutils-linux
    state: present
  when: "incus_roles | length > 0 and 'zfs' in incus_init['storage'] | dict2items | json_query('[].value.driver')"

- name: Set uid allocation
  ansible.builtin.command: "usermod root --add-subuids 10000000-1009999999"
  when: '(install_deb.changed or install_rpm.changed) and ansible_distribution == "CentOS"'
  changed_when: true

- name: Set gid allocation
  ansible.builtin.command: "usermod root --add-subgids 10000000-1009999999"
  when: '(install_deb.changed or install_rpm.changed) and ansible_distribution == "CentOS"'
  changed_when: true

- name: Enable incus socket unit
  ansible.builtin.systemd:
    enabled: true
    name: incus.socket
    state: started
  when: 'install_deb.changed or install_rpm.changed'

- name: Enable incus service unit
  ansible.builtin.systemd:
    enabled: true
    name: incus.service
    state: started
  when: 'install_deb.changed or install_rpm.changed'

- name: Enable incus startup unit
  ansible.builtin.systemd:
    enabled: true
    name: incus-startup.service
    state: started
  when: 'install_deb.changed or install_rpm.changed'

- name: Set client listen address
  ansible.builtin.command: "incus --force-local config set core.https_address {{ incus_ip_address_or_default }}"
  when: >-
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Set cluster listen address
  ansible.builtin.command: "incus --force-local config set cluster.https_address {{ incus_ip_address_or_default }}"
  when: '(install_deb.changed or install_rpm.changed) and "cluster" in incus_roles and incus_servers[0] == inventory_hostname'
  changed_when: true

- name: Set OVN NorthBound database
  ansible.builtin.command: >-
    incus --force-local config
    set network.ovn.northbound_connection={{ incus_ovn_northbound }}
    network.ovn.client_cert="{{ lookup('file', ovn_config_dir+'/'+inventory_hostname+'.crt') }}"
    network.ovn.client_key="{{ lookup('file', ovn_config_dir+'/'+inventory_hostname+'.key') }}"
    network.ovn.ca_cert="{{ lookup('file', ovn_config_dir+'/ca.crt') }}"
  notify: Restart Incus
  when: >-
    (install_deb.changed or install_rpm.changed) and
    incus_ovn_northbound and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  tags:
    - skip_ansible_lint
  changed_when: true

- name: Add networks
  ansible.builtin.command: >-
    incus network create {{ item.key }} --type={{ item.value.type }}
    {% for k in item.value.local_config | default([]) %}{{ k }}={{ item.value.local_config[k] }}{% endfor %}
    {% for k in item.value.config | default([]) %} {{ k }}={{ item.value.config[k] }}{% endfor %}
  loop: "{{ incus_init['network'] | dict2items }}"
  when: >-
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Set network description
  ansible.builtin.command: >-
    incus network set --property {{ item.key }} description="{{ item.value.description }}"
  loop: "{{ incus_init['network'] | dict2items }}"
  when: >-
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
    and item.value.description | default(None)
  changed_when: true

- name: Add storage pools
  ansible.builtin.command: >-
    incus storage create {{ item.key }} {{ item.value.driver }}
    {% for k in item.value.local_config | default([]) %} {{ k }}={{ item.value.local_config[k] }}{% endfor %}
    {% for k in item.value.config | default([]) %} {{ k }}={{ item.value.config[k] }}{% endfor %}
  loop: "{{ incus_init['storage'] | dict2items }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Set storage pool description
  ansible.builtin.command: "incus storage set --property {{ item.key }} description=\"{{ item.value.description }}\""
  loop: "{{ incus_init['storage'] | dict2items }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname)) and
    item.value.description | default(None)
  changed_when: true

- name: Add storage pool to default profile
  ansible.builtin.command: "incus profile device add default root disk path=/ pool={{ item }}"
  loop: "{{ incus_init['storage'] | dict2items | json_query('[?value.default].key') }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Add network to default profile
  ansible.builtin.command: "incus profile device add default eth0 nic network={{ item }} name=eth0"
  loop: "{{ incus_init['network'] | dict2items | json_query('[?value.default].key') }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Bootstrap the cluster
  ansible.builtin.command: "incus --force-local cluster enable {{ inventory_hostname }}"
  when: '(install_deb.changed or install_rpm.changed) and "cluster" in incus_roles and incus_servers[0] == inventory_hostname'
  changed_when: true

- name: Create join tokens
  delegate_to: "{{ incus_servers[0] }}"
  ansible.builtin.command: "incus --force-local --quiet cluster add {{ inventory_hostname }}"
  register: cluster_add
  when: '(install_deb.changed or install_rpm.changed) and "cluster" in incus_roles and incus_servers[0] != inventory_hostname'
  changed_when: true

- name: Wait 5s to avoid token use before valid
  ansible.builtin.wait_for:
    timeout: 5
  delegate_to: localhost
  when: '(install_deb.changed or install_rpm.changed) and "cluster" in incus_roles and incus_servers[0] != inventory_hostname'
  changed_when: false

- name: Join the cluster
  throttle: 1
  ansible.builtin.command:
    cmd: "incus --force-local admin init --preseed"
    stdin: |-
      cluster:
        enabled: true
        cluster_address: "{{ incus_ip_address_or_default }}"
        cluster_token: "{{ cluster_add.stdout }}"
        server_address: "{{ incus_ip_address_or_default }}"
        member_config:
        {% for pool in incus_init.storage %}
        {% for key in incus_init.storage[pool].local_config | default([]) %}
          - entity: storage-pool
            name: {{ pool }}
            key: {{ key }}
            value: {{ incus_init.storage[pool].local_config[key] }}
        {% endfor %}
        {% endfor %}
        {% for network in incus_init.network %}
        {% for key in incus_init.network[network].local_config | default([]) %}
          - entity: network
            name: {{ network }}
            key: {{ key }}
            value: {{ incus_init.network[network].local_config[key] }}
        {% endfor %}
        {% endfor %}
  when: 'cluster_add.changed'
  tags:
    - skip_ansible_lint
  changed_when: true

- name: Apply additional configuration
  ansible.builtin.command: "incus config set {{ item.key }}=\"{{ item.value }}\""
  loop: "{{ incus_init['config'] | default({}) | dict2items }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))
  changed_when: true

- name: Load client certificates
  ansible.builtin.command:
    cmd: "incus config trust add-certificate --name \"{{ item.key }}\" --type={{ item.value.type | default('client') }} -"
    stdin: "{{ item.value.certificate }}"
  loop: "{{ incus_init['clients'] | default({}) | dict2items }}"
  when: >
    (install_deb.changed or install_rpm.changed) and
    ("standalone" in incus_roles or ("cluster" in incus_roles and incus_servers[0] == inventory_hostname))'
  changed_when: true
